version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: indieout_development
    ports:
      - "54321:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Rails API
  api:
    build:
      context: .
      dockerfile: api/Dockerfile.dev
    ports:
      - "3000:3000"
    env_file:
      - ./api/.env
    environment:
      DATABASE_URL: postgresql://postgres:postgres@host.docker.internal:54321/indieout_development
      RAILS_ENV: development
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY:-development_key}
      PORT: 3000
    volumes:
      - ./api:/rails
      - api_storage:/rails/storage
    command: >
      sh -c "bundle install &&
             rm -f /rails/tmp/pids/server.pid &&
             bundle exec rails db:migrate:status || bundle exec rails db:drop db:create db:migrate db:seed &&
             bundle exec rails server -b 0.0.0.0"

  # React Frontend
  client:
    build:
      context: .
      dockerfile: client/Dockerfile.dev
    ports:
      - "3001:3000"
    environment:
      VITE_API_URL: ""
      VITE_API_HOST: api
    volumes:
      - ./client:/app
      - /app/node_modules
    command: >
      sh -c "npm install &&
             npm run dev -- --host --config vite.config.docker.ts"

  # Full Monorepo (Production-like)
  monorepo:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:8080
    ports:
      - "8080:80"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/indieout_production
      RAILS_ENV: production
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      BUCKET_NAME: ${BUCKET_NAME}
      AWS_ENDPOINT_URL_S3: ${AWS_ENDPOINT_URL_S3}
      AWS_REGION: ${AWS_REGION}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - production

volumes:
  postgres_data:
  api_storage: