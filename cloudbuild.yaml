# Cloud Build configuration for IndieOut marketplace
# This file orchestrates the build and deployment process on GCP

substitutions:
  _REGION: us-central1
  _REPOSITORY: indieout
  _SERVICE_NAME_API: indieout-api
  _SERVICE_NAME_FRONTEND: indieout-frontend
  _CLOUD_SQL_CONNECTION: ${PROJECT_ID}:${_REGION}:indieout-db

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

steps:
  # Run tests
  - name: 'gcr.io/cloud-builders/docker'
    id: 'test-api'
    args:
      - 'build'
      - '-f'
      - 'api/Dockerfile.test'
      - '-t'
      - 'test-api'
      - './api'
    waitFor: ['-']

  - name: 'test-api'
    id: 'run-api-tests'
    env:
      - 'RAILS_ENV=test'
      - 'DATABASE_URL=postgresql://postgres:postgres@postgres:5432/test'
    waitFor: ['test-api']

  - name: 'node:18'
    id: 'test-frontend'
    dir: 'client'
    entrypoint: 'npm'
    args: ['test', '--', '--run']
    env:
      - 'CI=true'
    waitFor: ['-']

  # Build API Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-api'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/api:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/api:latest'
      - './api'
    waitFor: ['run-api-tests']

  # Push API image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-api'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/api'
    waitFor: ['build-api']

  # Build frontend
  - name: 'node:18'
    id: 'build-frontend'
    dir: 'client'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        npm ci
        VITE_API_URL=https://${_SERVICE_NAME_API}-${SHORT_SHA}-${PROJECT_ID}.a.run.app npm run build
    env:
      - 'VITE_STRIPE_PUBLISHABLE_KEY=${_STRIPE_PUBLISHABLE_KEY}'
    waitFor: ['test-frontend']

  # Deploy API to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-api'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME_API}'
      - '--image'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/api:${SHORT_SHA}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--add-cloudsql-instances'
      - '${_CLOUD_SQL_CONNECTION}'
      - '--set-env-vars'
      - 'RAILS_ENV=production,RAILS_LOG_TO_STDOUT=true,RAILS_SERVE_STATIC_FILES=true'
      - '--set-secrets'
      - 'DATABASE_URL=database-url:latest,RAILS_MASTER_KEY=rails-master-key:latest,JWT_SECRET_KEY=jwt-secret-key:latest'
      - '--min-instances'
      - '1'
      - '--max-instances'
      - '10'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '1'
      - '--timeout'
      - '60'
    waitFor: ['push-api']

  # Run database migrations
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'migrate-db'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run jobs create migrate-db-${SHORT_SHA} \
          --image ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/api:${SHORT_SHA} \
          --region ${_REGION} \
          --add-cloudsql-instances ${_CLOUD_SQL_CONNECTION} \
          --set-env-vars "RAILS_ENV=production" \
          --set-secrets "DATABASE_URL=database-url:latest,RAILS_MASTER_KEY=rails-master-key:latest" \
          --command "bundle,exec,rails,db:migrate" \
          --max-retries 3 \
          --parallelism 1 \
          --task-timeout 600
        
        gcloud run jobs execute migrate-db-${SHORT_SHA} --region ${_REGION} --wait
        
        gcloud run jobs delete migrate-db-${SHORT_SHA} --region ${_REGION} --quiet
    waitFor: ['deploy-api']

  # Deploy frontend to Cloud Storage
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-frontend'
    dir: 'client'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Create bucket if it doesn't exist
        gsutil mb -p ${PROJECT_ID} gs://${_SERVICE_NAME_FRONTEND}-${PROJECT_ID} || true
        
        # Enable versioning
        gsutil versioning set on gs://${_SERVICE_NAME_FRONTEND}-${PROJECT_ID}
        
        # Upload files
        gsutil -m rsync -r -d \
          -x ".*\.map$" \
          dist/ gs://${_SERVICE_NAME_FRONTEND}-${PROJECT_ID}/
        
        # Set cache headers
        gsutil -m setmeta -h "Cache-Control:no-cache, no-store, must-revalidate" \
          gs://${_SERVICE_NAME_FRONTEND}-${PROJECT_ID}/index.html
        
        gsutil -m setmeta -h "Cache-Control:public, max-age=31536000, immutable" \
          "gs://${_SERVICE_NAME_FRONTEND}-${PROJECT_ID}/assets/**"
    waitFor: ['build-frontend']

  # Update load balancer backend
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'update-cdn'
    entrypoint: 'gcloud'
    args:
      - 'compute'
      - 'backend-buckets'
      - 'update'
      - '${_SERVICE_NAME_FRONTEND}-backend'
      - '--gcs-bucket-name'
      - '${_SERVICE_NAME_FRONTEND}-${PROJECT_ID}'
    waitFor: ['deploy-frontend']

  # Create/update traffic splitting for canary deployment
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'traffic-split'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # For production, gradually roll out traffic
        if [[ "$BRANCH_NAME" == "main" ]]; then
          # Start with 10% traffic to new version
          gcloud run services update-traffic ${_SERVICE_NAME_API} \
            --region ${_REGION} \
            --to-revisions ${_SERVICE_NAME_API}-${SHORT_SHA}=10
          
          # Wait 5 minutes
          sleep 300
          
          # Increase to 50%
          gcloud run services update-traffic ${_SERVICE_NAME_API} \
            --region ${_REGION} \
            --to-revisions ${_SERVICE_NAME_API}-${SHORT_SHA}=50
          
          # Wait 5 minutes
          sleep 300
          
          # Full rollout
          gcloud run services update-traffic ${_SERVICE_NAME_API} \
            --region ${_REGION} \
            --to-revisions ${_SERVICE_NAME_API}-${SHORT_SHA}=100
        fi
    waitFor: ['migrate-db']

# Timeout for the entire build
timeout: 1800s

# Artifacts to store
artifacts:
  objects:
    location: 'gs://${PROJECT_ID}_cloudbuild_artifacts/${BUILD_ID}'
    paths:
      - 'client/dist/**/*'